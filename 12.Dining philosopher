#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define N 5
#define LEFT (id + N - 1) % N
#define RIGHT (id + 1) % N
enum { THINKING, HUNGRY, EATING } state[N];
sem_t mutex, s[N];
int main() {
    pthread_t tid[N];
    int i, ids[N];
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++) {
        sem_init(&s[i], 0, 0);
        ids[i] = i;
    }
    for (i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, (void *(*)(void *))({
            int id = i;
            void *philosopher(void *arg) {
                while (1) {
                    printf("Philosopher %d is thinking\n", id);
                    sem_wait(&mutex);
                    state[id] = HUNGRY;
                    printf("Philosopher %d is hungry\n", id);
                    if (state[LEFT] != EATING && state[RIGHT] != EATING) {
                        state[id] = EATING;
                        sem_post(&s[id]);
                    }
                    sem_post(&mutex);
                    sem_wait(&s[id]);
                    printf("Philosopher %d is eating\n", id);
                    sleep(2);
                    printf("Philosopher %d is finished eating\n", id);
                    sem_wait(&mutex);
                    state[id] = THINKING;
                    printf("Philosopher %d puts down forks\n", id);
                    if (state[LEFT] == HUNGRY) sem_post(&s[LEFT]);
                    if (state[RIGHT] == HUNGRY) sem_post(&s[RIGHT]);
                    sem_post(&mutex);
                }
                return NULL;
            };
            philosopher;
        }), &ids[i]);
    }
    pthread_exit(NULL);
    return 0;
}
