#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define NUM_THREADS 5
void *threadFunction(void *arg) {
    int thread_id = *((int*)arg);
    printf("Thread %d is running\n", thread_id);
    printf("Thread %d is finished\n", thread_id);
    return NULL;
}
int main() {
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];
    int i, status;
    for (i = 0; i < NUM_THREADS; i++) {
        thread_args[i] = i + 1;
        status = pthread_create(&threads[i], NULL, threadFunction, (void*)&thread_args[i]);
        if (status != 0) {
            fprintf(stderr, "pthread_create failed: %d\n", status);
            exit(EXIT_FAILURE);
        }
    }
    for (i = 0; i < NUM_THREADS; i++) {
        status = pthread_join(threads[i], NULL);
        if (status != 0) {
            fprintf(stderr, "pthread_join failed: %d\n", status);
            exit(EXIT_FAILURE);
        }
    }
    printf("All threads have finished\n");
    return 0;
}
